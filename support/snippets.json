{
    "snippets" : [
        {
            "name" : "Import knihoven",
            "code" : [
                "import numpy as np",
                "import matplotlib.pyplot as plt",
                "import pandas as pd",
                "from scipy.integrate import solve_ivp",
		"# import my_shared_data_folder.modely_dmp as m",
                "# from scipy import optimize"            
            ]
        },
        {
            "name" : "Graf funkce, NumPy",
            "code" : [
                "x = np.linspace(-1,1,100)",
                "y = np.exp(-x**2)",
                "",
                "fig,ax = plt.subplots()",
                "ax.plot(x,y)",
                "ax.set(",
                "    #xlim=(0,None),",
                "    #ylim=(0,None),",
                "    title=\"Nadpis grafu\",",
                "    xlabel=\"Popisek vodorovně\",",
                "    ylabel=\"Popisek svisle\",",
                "    #xscale=\"log\", # logaritmicke osy",
                "    #yscale=\"log\",",
                ")",
                "ax.grid()"
            ]
        },
        {"name": "Dva grafy pod sebou, sdílená osa x",
        "code": [
                   "# Tabulka funkčních hodnot, aby bylo co kreslit",
                    "x = np.linspace(-5,5,100)",
                    "df = pd.DataFrame()",
                    "df[\"x\"]=x",
                    "df[\"druhá mocnina\"] = x**2",
                    "df[\"třetí mocnina\"] = x**3",
                    "",
                    "# vykresleni dat do obrazku",
                    "fig,ax = plt.subplots(2,1,figsize=(8,4),sharex=True) # zalozeni obrazku se dvema soustavami souradnic pod sebou",
                    "df.plot(x=\"x\",y=\"druhá mocnina\",ax=ax[0], legend=False)# prvni graf",
                    "df.plot(x=\"x\",y=\"třetí mocnina\",ax=ax[1], legend=False, color=\"C1\")# druhy graf",
                    "#### Varianta bez DataFrame",
                    "# ax[0].plot(df[\"x\"],df[\"druhá mocnina\"],label=\"Druhá mocnina\")",
                    "# ax[1].plot(df[\"x\"],df[\"třetí mocnina\"],label=\"Třetí mocnina\", color=\"C1\")",
                    "",
                    "# Dekorace grafu",
                    "ax[0].grid() # vykresleni mrizky",
                    "ax[1].grid() # vykresleni mrizky",
                    "ax[0].set(ylabel=\"Druhá mocnina\")",
                    "ax[1].set(ylabel=\"Třetí mocnina\")",
                    "fig.legend([\"Druhá mocnina\",\"Třetí mocnina\"])"        
                ]},
	    { "name" : "Řešení rovnice",
		  "code": [
		    "from scipy import optimize # Přidat import na začátek dokumentu",
		    "def f(x):    # Nadefinovat funkci nebo použít lambda funkci",
		    "    return x**4-3*x-2",
		    "x1 = optimize.fsolve(f,2)  # Řešení rovnice f(x)=0, začátek hledání v x=2",
		    "x2 = optimize.fsolve(lambda x: f(x)-5, 2) # Řešení rovnice f(x)=5, začátek hledání v x=2"
		  ]
	    },
        {
            "name" : "Řešení diferenciální rovnice (DR)",
            "code" : [
    "### Příprava funkcí a parametrů",
    "pocatecni_podminka = [0]  # počáteční podmínka nebo podmínky",
    "meze = [0,15]  # interval, na kterém hledáme řešení",
    "n = 100 # počet dělících bodů",
    "",
    "def model(t, N, a=1, b=8, beta=0.2, D=0.5, k=1.3, S=20):",
    "    \"\"\"",
    "    Funkce z pravé strany modelu dynamické rovnováhy počtu druhů na ostrovech, ",
    "    podle McArthura a Wilsona. ",
    "    ",
    "    Vstup:",
    "    -----",
    "    Povinnými parametry jsou čas a počet druhů, volitelnými vzdálenost ",
    "    D od pevniny, rozloha ostrova S, další parametry modelu a konstanty ",
    "    úměrnosti. Přednastavené hodnoty jsou pouze ilustrační, závisí na volbě",
    "    jednotek a konkrétním použití.",
    "    ",
    "    Výstup:",
    "    ------",
    "    Hodnota funkce.",
    "    \"\"\"",
    "    kolonizace = b/(D*(N+beta))",
    "    vymirani = a*N**k/S ",
    "    return  kolonizace - vymirani ",
    "",
    "### Řešení modelu",
    "t=np.linspace(*meze, n)  # definiční obor, v těchto bodech budeme hledat řešení",
    "reseni = solve_ivp(",
    "                   model,",
    "                   meze,",
    "                   pocatecni_podminka,",
    "                   t_eval=t",
    "                   )",
    "",
    "### Vizualizace řešení",
    "fig,ax = plt.subplots(1)",
    "ax.plot(t,reseni.y.T)",
    "ax.set(",
    "    ylim = (0,None),",
    "    title = \"Řešení diferenciální rovnice\",",
    "    xlabel=r\"$t$\",",
    "    ylabel=r\"$x$\",",
    ")"
             ]
        },
        {
            "name" : "Řešení DR pro různé parametry",
            "code" : [
    "### Příprava funkcí a parametrů",
    "pocatecni_podminka = [0]  # počáteční podmínka",
    "meze = [0,15]  # interval, na kterém hledáme řešení",
    "n = 100 # počet dělících bodů",
    "parametry = [0.25,0.5,1,2] # seznam parametrů",
    "",
    "",
    "def model(t, N, a=1, b=8, beta=0.2, D=0.5, k=1.3, S=20):",
    "    \"\"\"",
    "    Funkce z pravé strany modelu dynamické rovnováhy počtu druhů na ostrovech, ",
    "    podle McArthura a Wilsona. ",
    "    ",
    "    Vstup:",
    "    -----",
    "    Povinnými parametry jsou čas a počet druhů, volitelnými vzdálenost ",
    "    D od pevniny, rozloha ostrova S, další parametry modelu a konstanty ",
    "    úměrnosti. Přednastavené hodnoty jsou pouze ilustrační, závisí na volbě",
    "    jednotek a konkrétním použití.",
    "    ",
    "    Výstup:",
    "    ------",
    "    Hodnota funkce.",
    "    \"\"\"",
    "    kolonizace = b/(D*(N+beta))",
    "    vymirani = a*N**k/S ",
    "    return  kolonizace - vymirani ",
    "",
    "### Řešení modelu",
    "t=np.linspace(*meze, n)  # definiční obor, v těchto bodech budeme hledat řešení",
    "df = pd.DataFrame()      # tabulka pro výstup",
    "df[\"t\"] = t              # sloupec s časem",
    "",
    "for parametr in parametry:",
    "    reseni = solve_ivp(",
    "                       lambda t,x:model(t,x,D=parametr),",
    "                       meze,",
    "                       pocatecni_podminka,",
    "                       t_eval=t",
    "                       )",
    "    df[parametr] = reseni.y.T # další sloupec tabulky",
    "    # lambda funkce viz https://www.w3schools.com/python/python_lambda.asp",
    "    # (dočasná nepojmenovaná funkce)",
    "",
    "### Vizualizace řešení",
    "ax = df.plot(x=\"t\")",
    "ax.set(",
    "    ylim = (0,None),",
    "    title = \"Řešení diferenciální rovnice\",",
    "    xlabel=r\"$t$\",",
    "    ylabel=r\"$x$\",",
    ")",
    "plt.legend(title=\"Hodnoty parametru\")"
            ]
        },
        {"name" : "DataFrame: vytvoření/načtení",
	 "code" : [
"### Snippet obsahuje více variant, jednu ponechejte a ostatní odmažte",
"###",
"",
"### Varianta tabulky z dat",
"# x = np.linspace(0,1,5)",
"# data = np.array([x,x**2,x**3])",
"# df = pd.DataFrame(data.T, columns=[\"x\",\"parabola\",\"kubicka parabola\"])",
"",
"### Varianta tabulky tvořené po sloupcích",
"df = pd.DataFrame()",
"df[\"x\"] = np.linspace(0,1,5)",
"df[\"parabola\"] = df.x**2",
"df[\"kubicka parabola\"] = df.x**3",
"",
"### Varianta tabulky načtené z csv souboru,",
"### Podobné pd.read_excel pro načtení z excelovské tabulky",
"# zdroj = \"https://raw.githubusercontent.com/robert-marik/dmp/main/data/hudson_bay_lynx_hare.csv\"",
"# df = pd.read_csv(",
"#     zdroj,     # jmeno souboru nebo URL",
"#     sep=\",\",   # nejbeznejsimi oddelovaci jsou carka nebo strednik",
"#     skiprows=2,# zacatek nekdy obsahuje popisky",
"#     )",
"",
"df"
		  ]
	},
        {
            "name" : "DataFrame: graf",
            "code" : [
                "x = np.linspace(-2,2,100)",
                "df = pd.DataFrame()",
                "df[\"x\"] = x",
                "df[\"exp(-x^2)\"] = np.exp(-x**2)",
                "df[\"exp(-(3x)^2)\"] = np.exp(-(3*x)**2)",
                "df[\"3*exp(-x^2)\"] = 3*np.exp(-x**2)",
		"",
                "ax = df.plot(",
                "    x=\"x\",",
                "    title=\"Efekt lineární transformace na graf\",", 
                "    grid=True,", 
                "    figsize=(6,3),",
                "    xlabel=\"popisek vodorovně\",",
                "    ylabel=\"popisek svisle\",",
                "    #legend=False",
                "    )",
                "ax.legend(",
                "    title=\"Legenda\",",
                "    #bbox_to_anchor=(1.04, 1), # legenda vně obrázku",
                "    loc=\"upper left\"",
                "    )"
            ]
        },
        {"name" : "DataFrame: uložení do csv",
	 "code" : ["df.to_csv(\"file.csv\")"]
	},
    {"name" : "Zobrazování čísel: nepoužívat vědeckou notaci",
     "code" : ["np.set_printoptions(suppress=True)"]
    }
    ]
}

